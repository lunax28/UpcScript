
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author equilibrium
 */
public class Rename extends javax.swing.JFrame {

    /**
     * Creates new form Rename
     */
    File sourceFolderPath = null;

    public Rename() {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        RenameItmsp = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        sortButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();
        jLabel9 = new javax.swing.JLabel();
        sourceButton = new javax.swing.JButton();
        LabelOne = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        sourceLabel = new javax.swing.JLabel();
        labelTwo = new javax.swing.JLabel();
        labelThree = new javax.swing.JLabel();
        SortPicsButton = new javax.swing.JButton();
        labelFour = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        InfoMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        CopyMenu = new javax.swing.JMenuItem();
        PasteMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        jLabel2.setText("Create iTunes Producer packages");

        RenameItmsp.setText(".itmsp");
        RenameItmsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenameItmspActionPerformed(evt);
            }
        });

        sortButton.setText("Sort Tracks");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Sort the tracks randomly");

        textArea1.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                textArea1TextValueChanged(evt);
            }
        });

        jLabel9.setText("UPC List");

        sourceButton.setText("SOURCE");
        sourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceButtonActionPerformed(evt);
            }
        });

        LabelOne.setText("1)");

        jLabel10.setText("Select the source folder. Album folders will be created according to the UPC List");

        labelTwo.setText("2)");

        labelThree.setText("3)");

        SortPicsButton.setText("Sort Covers");
        SortPicsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortPicsButtonActionPerformed(evt);
            }
        });

        labelFour.setText("4)");

        jLabel4.setText("Sort your covers automatically");

        jMenu1.setText("File");

        InfoMenu.setText("Info");
        InfoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InfoMenuActionPerformed(evt);
            }
        });
        jMenu1.add(InfoMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        CopyMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        CopyMenu.setText("Copy");
        CopyMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyMenuActionPerformed(evt);
            }
        });
        jMenu2.add(CopyMenu);

        PasteMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        PasteMenu.setText("Paste");
        PasteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteMenuActionPerformed(evt);
            }
        });
        jMenu2.add(PasteMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        helpMenu.setText("Info");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });
        jMenu3.add(helpMenu);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelOne)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourceButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sourceLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addGap(48, 48, 48))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTwo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortButton))
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelThree)
                                    .addComponent(labelFour))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SortPicsButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel3))
                                    .addComponent(RenameItmsp)))
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(LabelOne)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTwo)
                            .addComponent(sortButton))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelThree)
                            .addComponent(SortPicsButton))
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3)
                            .addComponent(RenameItmsp, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelFour)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(sourceButton)
                                    .addComponent(sourceLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //concatenates .itmsp to the subdirectories in jLabel3.getText()
    private void RenameItmspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameItmspActionPerformed
        if (sourceLabel.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select a folder first");
            return;
        }
        File sourcepath = null;
        sourcepath = new File(sourceLabel.getText());

        System.out.println(sourcepath);

        File list[] = sourcepath.listFiles();
        if (list == null) {
            JOptionPane.showMessageDialog(this, "No files/folders found");
            return;
        }

        for (int i = 0; i < list.length; i++) {
            if (list[i].isDirectory()) {
                File re = new File(list[i].getAbsolutePath().concat(".itmsp"));
                list[i].renameTo(re);
            }
        }
        JOptionPane.showMessageDialog(this, "Folders renamed!*");
    }//GEN-LAST:event_RenameItmspActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed

        if (sourceLabel.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No path specified!");
            return;

        }

        //check if there's tracks folder and if it contains files 
        File tracksFolder = null;
        File sourcepath = new File(sourceLabel.getText());
        System.out.println("sourcepath: " + sourcepath);

        try {            
            tracksFolder = new File(sourceLabel.getText() + "/" + "tracks");
            if (!tracksFolder.exists() || !tracksFolder.isDirectory()) {
                JOptionPane.showMessageDialog(this, "tracks folder was NOT found!");
                return;
            }

        } catch (Exception e) {
            System.out.println("Error Exception");
        }
        
        System.out.println("tracksFolder:" + tracksFolder);

        //array of files contained in the source folder
        File listRoot[] = sourcepath.listFiles();

        if (listRoot == null) {
            System.out.println("no files");
            return;
        } else {
            System.out.println("tracks folder available");
        }

        int count = 0;

        ArrayList<Integer> listRandom = new ArrayList<Integer>();

        Random rand = new Random();

        int index = 0;
        int in = 0;
        while (count < listRoot.length) {

            listRandom.clear();
            for (int i = 0; i < tracksFolder.listFiles().length; i++) {
                listRandom.add(i);
            }

            File list[] = tracksFolder.listFiles();
            if (list == null) {
                return;
            }

            if (listRoot[count].isDirectory() && listRoot[count].getName().matches("[0-9]{13}")) {
                for (int i = 0; i < 25; i++) {

                    if (listRandom.isEmpty()) {
                        return;
                    }
                    System.out.println("NEW LOOP i: " + i);
                    System.out.println("line 61: LIST length: " + list.length);
                    System.out.println("line 62: LISTRANDOM size: " + listRandom.size());
                    index = rand.nextInt(listRandom.size());

                    System.out.println("index: " + index);

                    Collections.shuffle(listRandom);
                    System.out.println("listRandom: " + listRandom);
                    System.out.println("listRandom.get(index): " + listRandom.get(index));
                    in = listRandom.remove(index);
                    System.out.println("in: " + in);

                    if (list[in].isFile() && !list[in].isHidden()) {

                        if (list[in].renameTo(new File(listRoot[count] + "/" + list[in].getName()))) {
                            System.out.println("File is moved successfully!");
                            list[in].delete();
                        } else {
                            System.out.println("File has failed to move!");
                        }
                    } else {
                        i = i - 1;
                    }
                }
            }
            count++;

        }


    }//GEN-LAST:event_sortButtonActionPerformed

    private void textArea1TextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_textArea1TextValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textArea1TextValueChanged

    private void PasteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteMenuActionPerformed
        /*
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        String s = textArea1.getSelectedText();
        StringSelection clipString = new StringSelection(s);
        clip.setContents(clipString, null);
         */
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        String result;
        try {
            result = (String) clipboard.getData(DataFlavor.stringFlavor);
            textArea1.setText(result);
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(Rename.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_PasteMenuActionPerformed

    private void CopyMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyMenuActionPerformed
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        String s = textArea1.getSelectedText();
        StringSelection clipString = new StringSelection(s);
        clip.setContents(clipString, null);
    }//GEN-LAST:event_CopyMenuActionPerformed

    private void InfoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InfoMenuActionPerformed
        JOptionPane.showMessageDialog(this, "Alberto Vecchi - Version 1.5");
    }//GEN-LAST:event_InfoMenuActionPerformed

    private void sourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(null);
        chooser.setDialogTitle("Choose a folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            sourceFolderPath = chooser.getSelectedFile();

            String name = chooser.getName(sourceFolderPath);
            System.out.println("name is: " + name);
            System.out.println(sourceFolderPath.getAbsolutePath());
            System.out.println("path is: " + sourceFolderPath.toString());

            if (!name.matches("[0-9]{13}")) {
                JOptionPane.showMessageDialog(this, "The folder name must contain a valid UPC");
                return;
            }

            String title = "Confirmation Dialog";
            String message = "Make sure this is the correct folder! Files will be renamed, no reverse option. \n" + sourceFolderPath.getAbsolutePath();

            int reply = JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION);

            if (reply == JOptionPane.YES_OPTION) {

                sourceLabel.setText(sourceFolderPath.toString());

            } else {
                JOptionPane.showMessageDialog(this, "An error has occured!");
                return;

            }

            if (textArea1.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "UPC list empty!");
                sourceLabel.setText("");
                return;

            }

            Scanner r = null;

            try {
                r = new Scanner(textArea1.getText());

                for (int i = 0; i < 15; i++) {

                    if (r.hasNextLine()) {

                        File file = new File(sourceFolderPath.toString().concat("/").concat(r.nextLine()));
                        file.mkdir();

                    }
                }
            } finally {
                if (r != null) {
                    r.close();
                }
            }
        }

        File file = new File((sourceLabel.getText() + "/" + "tracks"));
        file.mkdir();
    }//GEN-LAST:event_sourceButtonActionPerformed

    private void SortPicsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortPicsButtonActionPerformed
        
        //A list of all the files in our source path
        File listRoot[] = sourceFolderPath.listFiles();
       
        int count = 0;
        //looping over all the files in our source path
        while (count < listRoot.length && listRoot[count].exists()) {
            
            //if a file IS a directory or its extension is .jpg do, else return
            if (listRoot[count].isDirectory() || listRoot[count].getName().substring(listRoot[count].getName().lastIndexOf(".")).equals(".jpg")) {

                //if the previous folder name is equal to the next file name without its extension MOVE, else return
                if (stripExtension(listRoot[count - 1].getName()).equals(stripExtension(listRoot[count].getName()))) {
                    System.out.println("ok");

                    try {

                        if (listRoot[count].renameTo(new File(listRoot[count - 1] + "/" + listRoot[count].getName()))) {
                            System.out.println("File is moved successfully!");
                        } else {
                            System.out.println("an error has occured");
                            return;
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else {
                    System.out.println("not equal!");
                    return;
                }

            }
            count = count + 2;
        }  
        
    }//GEN-LAST:event_SortPicsButtonActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
        JOptionPane.showMessageDialog(this, "Instructions:\n-Make your album covers first!\n-Copy and paste your UPCs into the blank box on the right.\n-Select the folder where you want your albums to be located.\n-The script creates as many folders as the numbers of UPCs in the box.\n  Additionally a folder named \"tracks\" will be created. Move there your music tracks.\n-Album covers can be sorted automatically into their respective folder.\n-Finally you can create the itmsp packages.");
    }//GEN-LAST:event_helpMenuActionPerformed

    
    static String stripExtension(String str) {
        
        // Handle null case specially.
        if (str == null) {
            return null;
        }

        // Get position of last '.'.
        int pos = str.lastIndexOf(".");

        // If there wasn't any '.' just return the string as is.
        if (pos == -1) {
            return str;
        }

        // Otherwise return the string, up to the dot.
        return str.substring(0, pos);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rename.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rename.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rename.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rename.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rename().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CopyMenu;
    private javax.swing.JMenuItem InfoMenu;
    private javax.swing.JLabel LabelOne;
    private javax.swing.JMenuItem PasteMenu;
    private javax.swing.JButton RenameItmsp;
    private javax.swing.JButton SortPicsButton;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelFour;
    private javax.swing.JLabel labelThree;
    private javax.swing.JLabel labelTwo;
    private javax.swing.JButton sortButton;
    private javax.swing.JButton sourceButton;
    private javax.swing.JLabel sourceLabel;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
